// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReportsOperations.
    /// </summary>
    public static partial class ReportsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of reports from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br&gt;**Note:**
            /// Paginated reports (rdl) don’t have a dataset. As a result, in the API
            /// response for paginated reports, the dataset ID value isn’t displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Reports GetReports(this IReportsOperations operations)
            {
                return operations.GetReportsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br&gt;**Note:**
            /// Paginated reports (rdl) don’t have a dataset. As a result, in the API
            /// response for paginated reports, the dataset ID value isn’t displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsAsync(this IReportsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Report GetReport(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> GetReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void DeleteReport(this IReportsOperations operations, System.Guid reportId)
            {
                operations.DeleteReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clones the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If after cloning the report and its dataset reside in two
            /// different upgraded workspaces or "My Workspace", a shared dataset will be
            /// created in the report's workspace. &lt;br/&gt;Reports with live connection
            /// will lose the live connection when cloning, and will have a direct binding
            /// to the target dataset.&lt;br/&gt;**Required scope**:
            /// Content.Create&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset (if provided) - Build permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            public static Report CloneReport(this IReportsOperations operations, System.Guid reportId, CloneReportRequest requestParameters)
            {
                return operations.CloneReportAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified report from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If after cloning the report and its dataset reside in two
            /// different upgraded workspaces or "My Workspace", a shared dataset will be
            /// created in the report's workspace. &lt;br/&gt;Reports with live connection
            /// will lose the live connection when cloning, and will have a direct binding
            /// to the target dataset.&lt;br/&gt;**Required scope**:
            /// Content.Create&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset (if provided) - Build permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> CloneReportAsync(this IReportsOperations operations, System.Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneReportWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the specified report from **"My Workspace"** to a .pbix file.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: As a [workaround for fixing timeout
            /// issues](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis),
            /// you can set `preferClientRouting` to true.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Report.ReadWrite.All or Report.Read.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Export of a report with [Power BI service
            /// live
            /// connection](https://docs.microsoft.com/en-us/power-bi/desktop-report-lifecycle-datasets)
            /// after calling [rebind report](/rest/api/power-bi/reports/RebindReport) is
            /// not supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Stream ExportReport(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.ExportReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from **"My Workspace"** to a .pbix file.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: As a [workaround for fixing timeout
            /// issues](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis),
            /// you can set `preferClientRouting` to true.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Report.ReadWrite.All or Report.Read.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Export of a report with [Power BI service
            /// live
            /// connection](https://docs.microsoft.com/en-us/power-bi/desktop-report-lifecycle-datasets)
            /// after calling [rebind report](/rest/api/power-bi/reports/RebindReport) is
            /// not supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ExportReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ExportReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Updates the specified report from **"My Workspace"** to have the same
            /// content as the report in the request body.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            public static Report UpdateReportContent(this IReportsOperations operations, System.Guid reportId, UpdateReportContentRequest requestParameters)
            {
                return operations.UpdateReportContentAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified report from **"My Workspace"** to have the same
            /// content as the report in the request body.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> UpdateReportContentAsync(this IReportsOperations operations, System.Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateReportContentWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rebinds the specified report from **"My Workspace"** to the requested
            /// dataset.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If the dataset resides in a different upgraded workspace, a
            /// shared dataset will be created in "My Workspace".&lt;br/&gt;Reports with
            /// live connection will lose the live connection when rebinding, and will have
            /// a direct binding to the target dataset.&lt;br/&gt;**Required scope**:
            /// Report.ReadWrite.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset - Build permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            public static void RebindReport(this IReportsOperations operations, System.Guid reportId, RebindReportRequest requestParameters)
            {
                operations.RebindReportAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebinds the specified report from **"My Workspace"** to the requested
            /// dataset.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If the dataset resides in a different upgraded workspace, a
            /// shared dataset will be created in "My Workspace".&lt;br/&gt;Reports with
            /// live connection will lose the live connection when rebinding, and will have
            /// a direct binding to the target dataset.&lt;br/&gt;**Required scope**:
            /// Report.ReadWrite.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset - Build permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebindReportAsync(this IReportsOperations operations, System.Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebindReportWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Pages GetPages(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetPagesAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pages> GetPagesAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagesWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified page within the specified report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            public static Page GetPage(this IReportsOperations operations, System.Guid reportId, string pageName)
            {
                return operations.GetPageAsync(reportId, pageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified page within the specified report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page> GetPageAsync(this IReportsOperations operations, System.Guid reportId, string pageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPageWithHttpMessagesAsync(reportId, pageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified RDL report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Datasources GetDatasources(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetDatasourcesAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified RDL report from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified paginated report from **"My
            /// Workspace"**. (Preview)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The original datasource and the new datasource
            /// must have the exact same schema.&lt;br/&gt;**Required scope**:
            /// Reports.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;This
            /// operation is only supported for the datasource
            /// owner&lt;/li&gt;&lt;li&gt;Update datasources supports only paginated
            /// reports&lt;/li&gt;&lt;li&gt;Changing datasource type is not
            /// supported&lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasources(this IReportsOperations operations, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
            {
                operations.UpdateDatasourcesAsync(reportId, updateRdlDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified paginated report from **"My
            /// Workspace"**. (Preview)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The original datasource and the new datasource
            /// must have the exact same schema.&lt;br/&gt;**Required scope**:
            /// Reports.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;This
            /// operation is only supported for the datasource
            /// owner&lt;/li&gt;&lt;li&gt;Update datasources supports only paginated
            /// reports&lt;/li&gt;&lt;li&gt;Changing datasource type is not
            /// supported&lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesAsync(this IReportsOperations operations, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesWithHttpMessagesAsync(reportId, updateRdlDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Exports the specified report from **"My Workspace"** to the requested
            /// format.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;&lt;br/&gt;**Limitations:**
            /// Premium Per User (PPU) is not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            public static Export ExportToFile(this IReportsOperations operations, System.Guid reportId, ExportReportRequest requestParameters)
            {
                return operations.ExportToFileAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from **"My Workspace"** to the requested
            /// format.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;&lt;br/&gt;**Limitations:**
            /// Premium Per User (PPU) is not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> ExportToFileAsync(this IReportsOperations operations, System.Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportToFileWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the status of the Export to file job from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Export GetExportToFileStatus(this IReportsOperations operations, System.Guid reportId, string exportId)
            {
                return operations.GetExportToFileStatusAsync(reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the status of the Export to file job from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> GetExportToFileStatusAsync(this IReportsOperations operations, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExportToFileStatusWithHttpMessagesAsync(reportId, exportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file of the Export to file job of the specified report from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Stream GetFileOfExportToFile(this IReportsOperations operations, System.Guid reportId, string exportId)
            {
                return operations.GetFileOfExportToFileAsync(reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file of the Export to file job of the specified report from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetFileOfExportToFileAsync(this IReportsOperations operations, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetFileOfExportToFileWithHttpMessagesAsync(reportId, exportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br&gt;**Note:**
            /// Paginated reports (rdl) don’t have a dataset. As a result, in the API
            /// response for paginated reports, the dataset ID value isn’t displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static Reports GetReportsInGroup(this IReportsOperations operations, System.Guid groupId)
            {
                return operations.GetReportsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br&gt;**Note:**
            /// Paginated reports (rdl) don’t have a dataset. As a result, in the API
            /// response for paginated reports, the dataset ID value isn’t displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsInGroupAsync(this IReportsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Report GetReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> GetReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void DeleteReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                operations.DeleteReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clones the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If after cloning the report and its dataset reside in two
            /// different upgraded workspaces or "My Workspace", a shared dataset will be
            /// created in the report's workspace. &lt;br/&gt;Reports with live connection
            /// will lose the live connection when cloning, and will have a direct binding
            /// to the target dataset.&lt;br/&gt;**Required scope**: Content.Create
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset (if provided) - Build permissions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            public static Report CloneReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CloneReportRequest requestParameters)
            {
                return operations.CloneReportInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If after cloning the report and its dataset reside in two
            /// different upgraded workspaces or "My Workspace", a shared dataset will be
            /// created in the report's workspace. &lt;br/&gt;Reports with live connection
            /// will lose the live connection when cloning, and will have a direct binding
            /// to the target dataset.&lt;br/&gt;**Required scope**: Content.Create
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset (if provided) - Build permissions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> CloneReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneReportInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to a .pbix file.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: As a [workaround for fixing timeout
            /// issues](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis),
            /// you can set `preferClientRouting` to true.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Report.ReadWrite.All or Report.Read.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Export of a report with [Power BI service
            /// live
            /// connection](https://docs.microsoft.com/en-us/power-bi/desktop-report-lifecycle-datasets)
            /// after calling [rebind report](/rest/api/power-bi/reports/RebindReport) is
            /// not supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Stream ExportReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.ExportReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to a .pbix file.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: As a [workaround for fixing timeout
            /// issues](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis),
            /// you can set `preferClientRouting` to true.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Report.ReadWrite.All or Report.Read.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Export of a report with [Power BI service
            /// live
            /// connection](https://docs.microsoft.com/en-us/power-bi/desktop-report-lifecycle-datasets)
            /// after calling [rebind report](/rest/api/power-bi/reports/RebindReport) is
            /// not supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ExportReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ExportReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Updates the specified report from the specified workspace to have the same
            /// content as the specified report in the request body.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            public static Report UpdateReportContentInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateReportContentRequest requestParameters)
            {
                return operations.UpdateReportContentInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified report from the specified workspace to have the same
            /// content as the specified report in the request body.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> UpdateReportContentInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateReportContentInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rebinds the specified report from the specified workspace to the requested
            /// dataset.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If the dataset resides in a different upgraded workspace or in
            /// "My Workspace", a shared dataset will be created in the report's
            /// workspace.&lt;br/&gt;Reports with live connection will lose the live
            /// connection when rebinding, and will have a direct binding to the target
            /// dataset.&lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset - Build permissions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            public static void RebindReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, RebindReportRequest requestParameters)
            {
                operations.RebindReportInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebinds the specified report from the specified workspace to the requested
            /// dataset.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If the dataset resides in a different upgraded workspace or in
            /// "My Workspace", a shared dataset will be created in the report's
            /// workspace.&lt;br/&gt;Reports with live connection will lose the live
            /// connection when rebinding, and will have a direct binding to the target
            /// dataset.&lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;br/&gt;**Required permissions**: Report - Write permissions. Target
            /// dataset - Build permissions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebindReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebindReportInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Pages GetPagesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetPagesInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pages> GetPagesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagesInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified page within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            public static Page GetPageInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string pageName)
            {
                return operations.GetPageInGroupAsync(groupId, reportId, pageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified page within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page> GetPageInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string pageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPageInGroupWithHttpMessagesAsync(groupId, reportId, pageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified RDL report from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Reportt.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// </param>
            public static Datasources GetDatasourcesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified RDL report from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Reportt.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified paginated report from the
            /// specified workspace. (Preview)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The original datasource and the new datasource
            /// must have the exact same schema.&lt;br/&gt;**Required scope**:
            /// Reports.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;This
            /// operation is only supported for the datasource
            /// owner&lt;/li&gt;&lt;li&gt;Update datasources supports only paginated
            /// reports&lt;/li&gt;&lt;li&gt;Changing datasource type is not
            /// supported&lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasourcesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
            {
                operations.UpdateDatasourcesInGroupAsync(groupId, reportId, updateRdlDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified paginated report from the
            /// specified workspace. (Preview)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The original datasource and the new datasource
            /// must have the exact same schema.&lt;br/&gt;**Required scope**:
            /// Reports.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;This
            /// operation is only supported for the datasource
            /// owner&lt;/li&gt;&lt;li&gt;Update datasources supports only paginated
            /// reports&lt;/li&gt;&lt;li&gt;Changing datasource type is not
            /// supported&lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesInGroupWithHttpMessagesAsync(groupId, reportId, updateRdlDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to the requested
            /// format.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;&lt;br/&gt;**Limitations:**
            /// Premium Per User (PPU) is not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            public static Export ExportToFileInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, ExportReportRequest requestParameters)
            {
                return operations.ExportToFileInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to the requested
            /// format.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;&lt;br/&gt;**Limitations:**
            /// Premium Per User (PPU) is not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> ExportToFileInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportToFileInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the status of the Export to file job from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Export GetExportToFileStatusInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId)
            {
                return operations.GetExportToFileStatusInGroupAsync(groupId, reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the status of the Export to file job from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> GetExportToFileStatusInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExportToFileStatusInGroupWithHttpMessagesAsync(groupId, reportId, exportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file of the Export to file job of the specified report from the
            /// specified group.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Stream GetFileOfExportToFileInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId)
            {
                return operations.GetFileOfExportToFileInGroupAsync(groupId, reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file of the Export to file job of the specified report from the
            /// specified group.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All or Report.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetFileOfExportToFileInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetFileOfExportToFileInGroupWithHttpMessagesAsync(groupId, reportId, exportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Generates an embed token to allow report creation on the specified
            /// workspace based on the specified dataset.&lt;br/&gt;&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// For more information about using this API, see [Considerations when
            /// generating an embed
            /// token](https://docs.microsoft.com/power-bi/developer/embedded/generate-embed-token).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Content.Create&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All
            /// or Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;When
            /// using service principal for authentication, refer to [Service Principal
            /// with Power
            /// BI](https://docs.microsoft.com/power-bi/developer/embed-service-principal)
            /// document along with considerations and limitations section.
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Generating Embed Token with RLS may not
            /// work for AS Azure or AS OnPrem live connection reports for several minutes
            /// after a [Rebind](/rest/api/power-bi/reports/RebindReport).&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenForCreateInGroup(this IReportsOperations operations, System.Guid groupId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenForCreateInGroupAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to allow report creation on the specified
            /// workspace based on the specified dataset.&lt;br/&gt;&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// For more information about using this API, see [Considerations when
            /// generating an embed
            /// token](https://docs.microsoft.com/power-bi/developer/embedded/generate-embed-token).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Content.Create&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All
            /// or Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;When
            /// using service principal for authentication, refer to [Service Principal
            /// with Power
            /// BI](https://docs.microsoft.com/power-bi/developer/embed-service-principal)
            /// document along with considerations and limitations section.
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Generating Embed Token with RLS may not
            /// work for AS Azure or AS OnPrem live connection reports for several minutes
            /// after a [Rebind](/rest/api/power-bi/reports/RebindReport).&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenForCreateInGroupAsync(this IReportsOperations operations, System.Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenForCreateInGroupWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates an embed token to view or edit the specified report from the
            /// specified workspace.&lt;br/&gt;&lt;br/&gt;This API is relevant only to
            /// ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// For more information about using this API, see [Considerations when
            /// generating an embed
            /// token](https://docs.microsoft.com/power-bi/developer/embedded/generate-embed-token).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;li&gt;Content.Create - required only if
            /// allowSaveAs specified in
            /// [GenerateTokenRequest](/rest/api/power-bi/embedtoken/reports_generatetokeningroup#GenerateTokenRequest)&lt;/li&gt;&lt;/ul&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;When
            /// using service principal for authentication, refer to [Service Principal
            /// with Power
            /// BI](https://docs.microsoft.com/power-bi/developer/embed-service-principal)
            /// document along with considerations and limitations section.
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Generating Embed Token with RLS may not
            /// work for AS Azure or AS OnPrem live connection reports for several minutes
            /// after a [Rebind](/rest/api/power-bi/reports/RebindReport).&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to view or edit the specified report from the
            /// specified workspace.&lt;br/&gt;&lt;br/&gt;This API is relevant only to
            /// ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// For more information about using this API, see [Considerations when
            /// generating an embed
            /// token](https://docs.microsoft.com/power-bi/developer/embedded/generate-embed-token).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All&lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;li&gt;Content.Create - required only if
            /// allowSaveAs specified in
            /// [GenerateTokenRequest](/rest/api/power-bi/embedtoken/reports_generatetokeningroup#GenerateTokenRequest)&lt;/li&gt;&lt;/ul&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;br/&gt;When
            /// using service principal for authentication, refer to [Service Principal
            /// with Power
            /// BI](https://docs.microsoft.com/power-bi/developer/embed-service-principal)
            /// document along with considerations and limitations section.
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;Generating Embed Token with RLS may not
            /// work for AS Azure or AS OnPrem live connection reports for several minutes
            /// after a [Rebind](/rest/api/power-bi/reports/RebindReport).&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Reports GetReportsInGroupAsAdmin(this IReportsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetReportsInGroupAsAdminAsync(groupId, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsInGroupAsAdminAsync(this IReportsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of reports for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Reports GetReportsAsAdmin(this IReportsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetReportsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsAsAdminAsync(this IReportsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of users that have access to the specified report (Preview).
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static ReportUsers GetReportUsersAsAdmin(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetReportUsersAsAdminAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified report (Preview).
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReportUsers> GetReportUsersAsAdminAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportUsersAsAdminWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers ownership over the specified paginated report datasources to the
            /// current authorized user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;li&gt;TakeOver
            /// report datasources supports only paginated reports&lt;/li&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void TakeOverInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                operations.TakeOverInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership over the specified paginated report datasources to the
            /// current authorized user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Report.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;li&gt;TakeOver
            /// report datasources supports only paginated reports&lt;/li&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TakeOverInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
