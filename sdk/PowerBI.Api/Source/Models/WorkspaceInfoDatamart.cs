// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Power BI datamart returned by Workspace Info APIs. The API returns a
    /// subset of the following list of datamart properties. The subset depends
    /// on the API called, caller permissions, and the availability of data in
    /// the Power BI database.
    /// </summary>
    public partial class WorkspaceInfoDatamart
    {
        /// <summary>
        /// Initializes a new instance of the WorkspaceInfoDatamart class.
        /// </summary>
        public WorkspaceInfoDatamart()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkspaceInfoDatamart class.
        /// </summary>
        /// <param name="id">The datamart ID</param>
        /// <param name="name">The datamart name</param>
        /// <param name="description">The datamart description</param>
        /// <param name="suspendedBatchId">datamart suspended batch id</param>
        /// <param name="endorsementDetails">The datamart endorsement
        /// details</param>
        /// <param name="sensitivityLabel">The datamart sensitivity
        /// label</param>
        /// <param name="modifiedBy">The last user that modified the
        /// datamart</param>
        /// <param name="modifiedDateTime">The date and time that the datamart
        /// was last modified</param>
        /// <param name="configuredBy">The name of the datamart owner</param>
        /// <param name="modifiedById">The ID of the last user that modified
        /// the datamart</param>
        /// <param name="configuredById">The ID of the datamart owner</param>
        /// <param name="upstreamDataflows">Datamart dependant
        /// dataflows</param>
        /// <param name="datasourceUsages">The data source usages</param>
        /// <param name="users">The user access details for a Power BI
        /// datamart.</param>
        public WorkspaceInfoDatamart(System.Guid id, string name = default(string), string description = default(string), string type = default(string), DatamartStatus1 status = default(DatamartStatus1), DatamartState state = default(DatamartState), string suspendedBatchId = default(string), EndorsementDetails endorsementDetails = default(EndorsementDetails), SensitivityLabel sensitivityLabel = default(SensitivityLabel), string modifiedBy = default(string), System.DateTime? modifiedDateTime = default(System.DateTime?), string configuredBy = default(string), string modifiedById = default(string), string configuredById = default(string), IList<DependentDataflow> upstreamDataflows = default(IList<DependentDataflow>), IList<DatasourceUsage> datasourceUsages = default(IList<DatasourceUsage>), IList<DatamartUser> users = default(IList<DatamartUser>))
        {
            Id = id;
            Name = name;
            Description = description;
            Type = type;
            Status = status;
            State = state;
            SuspendedBatchId = suspendedBatchId;
            EndorsementDetails = endorsementDetails;
            SensitivityLabel = sensitivityLabel;
            ModifiedBy = modifiedBy;
            ModifiedDateTime = modifiedDateTime;
            ConfiguredBy = configuredBy;
            ModifiedById = modifiedById;
            ConfiguredById = configuredById;
            UpstreamDataflows = upstreamDataflows;
            DatasourceUsages = datasourceUsages;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the datamart ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the datamart name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the datamart description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public DatamartStatus1 Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public DatamartState State { get; set; }

        /// <summary>
        /// Gets or sets datamart suspended batch id
        /// </summary>
        [JsonProperty(PropertyName = "suspendedBatchId")]
        public string SuspendedBatchId { get; set; }

        /// <summary>
        /// Gets or sets the datamart endorsement details
        /// </summary>
        [JsonProperty(PropertyName = "endorsementDetails")]
        public EndorsementDetails EndorsementDetails { get; set; }

        /// <summary>
        /// Gets or sets the datamart sensitivity label
        /// </summary>
        [JsonProperty(PropertyName = "sensitivityLabel")]
        public SensitivityLabel SensitivityLabel { get; set; }

        /// <summary>
        /// Gets or sets the last user that modified the datamart
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets the date and time that the datamart was last modified
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDateTime")]
        public System.DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the name of the datamart owner
        /// </summary>
        [JsonProperty(PropertyName = "configuredBy")]
        public string ConfiguredBy { get; set; }

        /// <summary>
        /// Gets or sets the ID of the last user that modified the datamart
        /// </summary>
        [JsonProperty(PropertyName = "modifiedById")]
        public string ModifiedById { get; set; }

        /// <summary>
        /// Gets or sets the ID of the datamart owner
        /// </summary>
        [JsonProperty(PropertyName = "configuredById")]
        public string ConfiguredById { get; set; }

        /// <summary>
        /// Gets or sets datamart dependant dataflows
        /// </summary>
        [JsonProperty(PropertyName = "upstreamDataflows")]
        public IList<DependentDataflow> UpstreamDataflows { get; set; }

        /// <summary>
        /// Gets or sets the data source usages
        /// </summary>
        [JsonProperty(PropertyName = "datasourceUsages")]
        public IList<DatasourceUsage> DatasourceUsages { get; set; }

        /// <summary>
        /// Gets or sets the user access details for a Power BI datamart.
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<DatamartUser> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SensitivityLabel != null)
            {
                SensitivityLabel.Validate();
            }
            if (DatasourceUsages != null)
            {
                foreach (var element in DatasourceUsages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Users != null)
            {
                foreach (var element1 in Users)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
