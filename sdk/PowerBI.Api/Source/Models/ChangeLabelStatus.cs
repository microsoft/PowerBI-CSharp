// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Artifact ID with information protection label status
    /// </summary>
    public partial class ChangeLabelStatus
    {
        /// <summary>
        /// Initializes a new instance of the ChangeLabelStatus class.
        /// </summary>
        public ChangeLabelStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChangeLabelStatus class.
        /// </summary>
        /// <param name="id">The unique ID of an artifact, which is in UUID
        /// format for dashboards, reports, and dataflows, and string format
        /// for datasets</param>
        /// <param name="status">Indicates the result of the label change
        /// operation. Possible values include: 'Failed',
        /// 'FailedToGetUsageRights', 'InsufficientUsageRights', 'NotFound',
        /// 'Succeeded'</param>
        public ChangeLabelStatus(string id, Status status)
        {
            Id = id;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique ID of an artifact, which is in UUID format
        /// for dashboards, reports, and dataflows, and string format for
        /// datasets
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets indicates the result of the label change operation.
        /// Possible values include: 'Failed', 'FailedToGetUsageRights',
        /// 'InsufficientUsageRights', 'NotFound', 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Status Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
