// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GroupsOperations.
    /// </summary>
    public static partial class GroupsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of workspaces the user has access to.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Users that have been recently added to a group may not
            /// have their new group immediately available, see [Refresh user
            /// permissions](https://docs.microsoft.com/en-us/rest/api/power-bi/users/refreshuserpermissions).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Workspace.Read.All or Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Groups GetGroups(this IGroupsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetGroupsAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of workspaces the user has access to.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Users that have been recently added to a group may not
            /// have their new group immediately available, see [Refresh user
            /// permissions](https://docs.microsoft.com/en-us/rest/api/power-bi/users/refreshuserpermissions).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Workspace.Read.All or Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Groups> GetGroupsAsync(this IGroupsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            /// <param name='workspaceV2'>
            /// Preview feature: Create a workspace V2. The only supported value is true.
            /// </param>
            public static Group CreateGroup(this IGroupsOperations operations, GroupCreationRequest requestParameters, bool? workspaceV2 = default(bool?))
            {
                return operations.CreateGroupAsync(requestParameters, workspaceV2).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            /// <param name='workspaceV2'>
            /// Preview feature: Create a workspace V2. The only supported value is true.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> CreateGroupAsync(this IGroupsOperations operations, GroupCreationRequest requestParameters, bool? workspaceV2 = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(requestParameters, workspaceV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID to delete
            /// </param>
            public static void DeleteGroup(this IGroupsOperations operations, System.Guid groupId)
            {
                operations.DeleteGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note:** User permissions are only refreshed when needed. As a
            /// result, the API might return a 401 error when a user has permission to a
            /// workspace. To refresh user permissions programmatically, use the [Refresh
            /// User Permissions](/rest/api/power-bi/users/refreshuserpermissions)
            /// API.&lt;br/&gt;&lt;br/&gt;**Required scope**: Workspace.Read.All or
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static GroupUsers GetGroupUsers(this IGroupsOperations operations, System.Guid groupId)
            {
                return operations.GetGroupUsersAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note:** User permissions are only refreshed when needed. As a
            /// result, the API might return a 401 error when a user has permission to a
            /// workspace. To refresh user permissions programmatically, use the [Refresh
            /// User Permissions](/rest/api/power-bi/users/refreshuserpermissions)
            /// API.&lt;br/&gt;&lt;br/&gt;**Required scope**: Workspace.Read.All or
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupUsers> GetGroupUsersAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Notes**: &lt;li&gt; Users that have been recently added to a
            /// group may not have their new group immediately available, see [Refresh user
            /// permissions](https://docs.microsoft.com/en-us/rest/api/power-bi/users/refreshuserpermissions).
            /// &lt;/li&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void AddGroupUser(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.AddGroupUserAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Notes**: &lt;li&gt; Users that have been recently added to a
            /// group may not have their new group immediately available, see [Refresh user
            /// permissions](https://docs.microsoft.com/en-us/rest/api/power-bi/users/refreshuserpermissions).
            /// &lt;/li&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddGroupUserAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddGroupUserWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Notes**: &lt;li&gt; Users permissions that have been recently
            /// updated may not have their new permissions immediately updated.
            /// &lt;/li&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void UpdateGroupUser(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.UpdateGroupUserAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Notes**: &lt;li&gt; Users permissions that have been recently
            /// updated may not have their new permissions immediately updated.
            /// &lt;/li&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.ReadWrite.All&lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupUserAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupUserWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the specified user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The email address of the user or object ID of the service principal to
            /// delete
            /// </param>
            public static void DeleteUserInGroup(this IGroupsOperations operations, System.Guid groupId, string user)
            {
                operations.DeleteUserInGroupAsync(groupId, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Workspace.ReadWrite.All&lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The email address of the user or object ID of the service principal to
            /// delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserInGroupAsync(this IGroupsOperations operations, System.Guid groupId, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserInGroupWithHttpMessagesAsync(groupId, user, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns **"My Workspace"** to the specified capacity.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must have admin or assign
            /// permissions on the capacity. To unassign **"My Workspace"** from a
            /// capacity, Empty Guid (00000000-0000-0000-0000-000000000000) should be
            /// provided as capacityId.  &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            public static void AssignMyWorkspaceToCapacity(this IGroupsOperations operations, AssignToCapacityRequest requestParameters)
            {
                operations.AssignMyWorkspaceToCapacityAsync(requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns **"My Workspace"** to the specified capacity.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must have admin or assign
            /// permissions on the capacity. To unassign **"My Workspace"** from a
            /// capacity, Empty Guid (00000000-0000-0000-0000-000000000000) should be
            /// provided as capacityId.  &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMyWorkspaceToCapacityAsync(this IGroupsOperations operations, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignMyWorkspaceToCapacityWithHttpMessagesAsync(requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified capacity.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be admin on the
            /// specified workspace and have admin or assign permissions on the capacity.
            /// To unassign the specified workspace from a capacity, Empty Guid
            /// (00000000-0000-0000-0000-000000000000) should be provided as capacityId.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Capacity.ReadWrite.All and
            /// Workspace.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            public static void AssignToCapacity(this IGroupsOperations operations, System.Guid groupId, AssignToCapacityRequest requestParameters)
            {
                operations.AssignToCapacityAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified capacity.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be admin on the
            /// specified workspace and have admin or assign permissions on the capacity.
            /// To unassign the specified workspace from a capacity, Empty Guid
            /// (00000000-0000-0000-0000-000000000000) should be provided as capacityId.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Capacity.ReadWrite.All and
            /// Workspace.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignToCapacityAsync(this IGroupsOperations operations, System.Guid groupId, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignToCapacityWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the status of **"My Workspace"** assignment to capacity operation.
            /// </summary>
            /// <remarks>
            /// **Note**: &lt;br/&gt;&lt;br/&gt;**Required scope**: Workspace.Read.All and
            /// Workspace.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WorkspaceCapacityAssignmentStatus CapacityAssignmentStatusMyWorkspace(this IGroupsOperations operations)
            {
                return operations.CapacityAssignmentStatusMyWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of **"My Workspace"** assignment to capacity operation.
            /// </summary>
            /// <remarks>
            /// **Note**: &lt;br/&gt;&lt;br/&gt;**Required scope**: Workspace.Read.All and
            /// Workspace.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatusMyWorkspaceAsync(this IGroupsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CapacityAssignmentStatusMyWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the status of the assignment to capacity operation of the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be admin on the
            /// specified workspace. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.Read.All and Workspace.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static WorkspaceCapacityAssignmentStatus CapacityAssignmentStatus(this IGroupsOperations operations, System.Guid groupId)
            {
                return operations.CapacityAssignmentStatusAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of the assignment to capacity operation of the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be admin on the
            /// specified workspace. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Workspace.Read.All and Workspace.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatusAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CapacityAssignmentStatusWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assigns the specified workspace to the specified dataflow storage account.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be an admin on the
            /// specified workspace and the Power BI dataflow storage account must be
            /// enabled. To unassign the specified workspace from a Power BI dataflow
            /// storage account, an empty GUID (00000000-0000-0000-0000-000000000000)
            /// should be provided as dataflowStorageId.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to Power BI dataflow storage account parameters
            /// </param>
            public static void AssignToDataflowStorage(this IGroupsOperations operations, System.Guid groupId, AssignToDataflowStorageRequest requestParameters)
            {
                operations.AssignToDataflowStorageAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified dataflow storage account.
            /// </summary>
            /// <remarks>
            /// **Note**: To perform this operation, the user must be an admin on the
            /// specified workspace and the Power BI dataflow storage account must be
            /// enabled. To unassign the specified workspace from a Power BI dataflow
            /// storage account, an empty GUID (00000000-0000-0000-0000-000000000000)
            /// should be provided as dataflowStorageId.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to Power BI dataflow storage account parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignToDataflowStorageAsync(this IGroupsOperations operations, System.Guid groupId, AssignToDataflowStorageRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignToDataflowStorageWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of workspaces for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter is mandatory and must be
            /// in the range of 1-5000.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: users, reports, dashboards, datasets, dataflows,
            /// workbooks
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            public static Groups GetGroupsAsAdmin(this IGroupsOperations operations, int top, string expand = default(string), string filter = default(string), int? skip = default(int?))
            {
                return operations.GetGroupsAsAdminAsync(top, expand, filter, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of workspaces for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API or
            /// authenticate via service principal. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All or Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions
            /// are supported. &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter is mandatory and must be
            /// in the range of 1-5000.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: users, reports, dashboards, datasets, dataflows,
            /// workbooks
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Groups> GetGroupsAsAdminAsync(this IGroupsOperations operations, int top, string expand = default(string), string filter = default(string), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsAsAdminWithHttpMessagesAsync(top, expand, filter, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified workspace properties.
            /// </summary>
            /// <remarks>
            /// **Note**: This API is currently limited to updating workspaces in the new
            /// workspace experience. Only name and description can be updated, and name
            /// must be unique inside an organization. The user must have administrator
            /// rights (such as Office 365 Global Administrator or Power BI Service
            /// Administrator) to call this API. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupProperties'>
            /// The properties to update
            /// </param>
            public static void UpdateGroupAsAdmin(this IGroupsOperations operations, System.Guid groupId, Group groupProperties)
            {
                operations.UpdateGroupAsAdminAsync(groupId, groupProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified workspace properties.
            /// </summary>
            /// <remarks>
            /// **Note**: This API is currently limited to updating workspaces in the new
            /// workspace experience. Only name and description can be updated, and name
            /// must be unique inside an organization. The user must have administrator
            /// rights (such as Office 365 Global Administrator or Power BI Service
            /// Administrator) to call this API. &lt;br/&gt;This API allows 200 requests
            /// per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupProperties'>
            /// The properties to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, Group groupProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupAsAdminWithHttpMessagesAsync(groupId, groupProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace
            /// (Preview).
            /// </summary>
            /// <remarks>
            /// This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions are supported.
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static GroupUsers GetGroupUsersAsAdmin(this IGroupsOperations operations, System.Guid groupId)
            {
                return operations.GetGroupUsersAsAdminAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace
            /// (Preview).
            /// </summary>
            /// <remarks>
            /// This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All. &lt;br/&gt;Delegated permissions are supported.
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupUsers> GetGroupUsersAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersAsAdminWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** This API is currently limited to updating workspaces in the new
            /// workspace experience and adding user principle only. The user must have
            /// administrator rights (such as Office 365 Global Administrator or Power BI
            /// Service Administrator) to call this API. &lt;br/&gt;This API allows 200
            /// requests per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void AddUserAsAdmin(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.AddUserAsAdminAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** This API is currently limited to updating workspaces in the new
            /// workspace experience and adding user principle only. The user must have
            /// administrator rights (such as Office 365 Global Administrator or Power BI
            /// Service Administrator) to call this API. &lt;br/&gt;This API allows 200
            /// requests per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUserAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUserAsAdminWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** This API is currently limited to updating workspaces in the new
            /// workspace experience and adding user principle only. The user must have
            /// administrator rights (such as Office 365 Global Administrator or Power BI
            /// Service Administrator) to call this API. &lt;br/&gt;This API allows 200
            /// requests per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The user principal name (UPN) of the user to remove (usually the user's
            /// email).
            /// </param>
            public static void DeleteUserAsAdmin(this IGroupsOperations operations, System.Guid groupId, string user)
            {
                operations.DeleteUserAsAdminAsync(groupId, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** This API is currently limited to updating workspaces in the new
            /// workspace experience and adding user principle only. The user must have
            /// administrator rights (such as Office 365 Global Administrator or Power BI
            /// Service Administrator) to call this API. &lt;br/&gt;This API allows 200
            /// requests per hour at maximum. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The user principal name (UPN) of the user to remove (usually the user's
            /// email).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserAsAdminWithHttpMessagesAsync(groupId, user, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: This API is currently limited to restoring workspaces in the new
            /// workspace experience. The user must have administrator rights (such as
            /// Office 365 Global Administrator or Power BI Service Administrator) to call
            /// this API. &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.ReadWrite.All&lt;br/&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupRestoreRequest'>
            /// Details of the group restore request
            /// </param>
            public static void RestoreDeletedGroupAsAdmin(this IGroupsOperations operations, System.Guid groupId, GroupRestoreRequest groupRestoreRequest)
            {
                operations.RestoreDeletedGroupAsAdminAsync(groupId, groupRestoreRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a deleted workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: This API is currently limited to restoring workspaces in the new
            /// workspace experience. The user must have administrator rights (such as
            /// Office 365 Global Administrator or Power BI Service Administrator) to call
            /// this API. &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;This API allows 200 requests per hour at maximum.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.ReadWrite.All&lt;br/&gt;To
            /// set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupRestoreRequest'>
            /// Details of the group restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreDeletedGroupAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, GroupRestoreRequest groupRestoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreDeletedGroupAsAdminWithHttpMessagesAsync(groupId, groupRestoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
